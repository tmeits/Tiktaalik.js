module {public} Main;

import
   System.IO.BinaryReader     as BinaryReader,
   System.IO.BinaryWriter     as BinaryWriter,
   System.IO.Path             as Path,
   System.IO.StreamReader     as StreamReader,
   System.IO.StreamWriter     as StreamWriter,
   System.Reflection.Assembly as Assembly,
   Bel.IO.Log                 as L,
   Bel.MF.Numbers             as N,
   Bel.MF.Arrays              as A,
   Bel.MF.Matrices            as M,
   Bel.IO.DataFiles           as DF;

var {private}
   asm : Assembly;
   dir, file, loc, path : string;

   procedure {private} AssignArray (var a : A.Array);
   var
      n : N.Number;
      s : string;
   begin
      s := "";
      a.Create(3);
      writeln("Enter the elements of a 3-dimensional array.");
      write("   a[1] = ");
      readln(s);
      n.Parse(s);
      a[1] := n;
      write("   a[2] = ");
      readln(s);
      n.Parse(s);
      a[2] := n;
      write("   a[3] = ");
      readln(s);
      n.Parse(s);
      a[3] := n
   end AssignArray;

   procedure {private} PrintArray (a : A.Array);
   var
      n : N.Number;
      s : string;
   begin
      s := "{ ";
      n := a[1];
      s := s + n.Typeset();
      s := s + "  ";
      n := a[2];
      s := s + n.Typeset();
      s := s + "  ";
      n := a[3];
      s := s + n.Typeset();
      s := s + "}^T";
      writeln(s)
   end PrintArray;

   procedure {private} Assign (var m : M.Matrix);
   var
      n : N.Number;
      s : string;
   begin
      s := "";
      m.Create(3,3);
      writeln("Supply the elements to a 3x3 matrix.");
      writeln("Enter the first row:");
      write("   m[1,1] = ");
      readln(s);
      n.Parse(s);
      m[1,1] := n;
      write("   m[1,2] = ");
      readln(s);
      n.Parse(s);
      m[1,2] := n;
      write("   m[1,3] = ");
      readln(s);
      n.Parse(s);
      m[1,3] := n;
      writeln("Enter the second row:");
      write("   m[2,1] = ");
      readln(s);
      n.Parse(s);
      m[2,1] := n;
      write("   m[2,2] = ");
      readln(s);
      n.Parse(s);
      m[2,2] := n;
      write("   m[2,3] = ");
      readln(s);
      n.Parse(s);
      m[2,3] := n;
      writeln("Enter the third row:");
      write("   m[3,1] = ");
      readln(s);
      n.Parse(s);
      m[3,1] := n;
      write("   m[3,2] = ");
      readln(s);
      n.Parse(s);
      m[3,2] := n;
      write("   m[3,3] = ");
      readln(s);
      n.Parse(s);
      m[3,3] := n
   end Assign;

   procedure {private} Print (m : M.Matrix);
   var
      n : N.Number;
      s : string;
   begin
      s := "| ";
      n := m[1,1];
      s := s + n.Typeset();
      s := s + "  ";
      n := m[1,2];
      s := s + n.Typeset();
      s := s + "  ";
      n := m[1,3];
      s := s + n.Typeset();
      s := s + "|";
      writeln(s);
      s := "| ";
      n := m[2,1];
      s := s + n.Typeset();
      s := s + "  ";
      n := m[2,2];
      s := s + n.Typeset();
      s := s + "  ";
      n := m[2,3];
      s := s + n.Typeset();
      s := s + "|";
      writeln(s);
      s := "| ";
      n := m[3,1];
      s := s + n.Typeset();
      s := s + "  ";
      n := m[3,2];
      s := s + n.Typeset();
      s := s + "  ";
      n := m[3,3];
      s := s + n.Typeset();
      s := s + "|";
      writeln(s);
   end Print;

   procedure {public} StringIO;
   var
      m : M.Matrix;
   begin
      Assign(m);
      writeln("The matrix entered in was:");
      Print(m);
      writeln()
   end StringIO;

   procedure {public} Store;
   var
      a, b : M.Matrix;
      bw : BinaryWriter;
      f : string;
   begin
      f := "testMatrices";
      bw := DF.OpenWriter(f);
      (* use the Store procedure to write some data *)
      writeln("Enter two matrices to store to a binary file.");
      Assign(a);
      a.Store(bw);
      Assign(b);
      b.Store(bw);
      DF.CloseWriter(bw);
      writeln("The first matrix written to file was:");
      Print(a);
      writeln("and the second matrix written to file was:");
      Print(b);
      writeln()
   end Store;

   procedure {public} Load;
   var
      a, b : M.Matrix;
      br : BinaryReader;
      f : string;
   begin
      f := "testMatrices";
      br := DF.OpenReader(f);
      (* read in the data *)
      a.Load(br);
      b.Load(br);
      DF.CloseReader(br);
      writeln("The first matrix read from file was:");
      Print(a);
      writeln("and the second matrix read from file was:");
      Print(b);
      writeln()
   end Load;

   procedure {public} Boolean;
   var
      s : string;
      x, y : M.Matrix;
   begin
      writeln("Test the boolean function of equality.");
      writeln();
      writeln("Enter a matrix for the left-hand side:");
      Assign(x);
      writeln("Enter a matrix for the right-hand side.");
      Assign(y);
      writeln();
      Print(x);
      writeln("   =");
      Print(y);
      s :=  "   is ";
      if x = y then
         s := s + "true"
      else
         s := s + "false"
      end;
      writeln(s)
   end Boolean;

   procedure {public} Arithmetic;
   var
      x, y, z : M.Matrix;
      n : N.Number;
      s : string;
   begin
      s := "";
      writeln("Test the arithmetic operators.");
      writeln;
      writeln("Enter a matrix for the left-hand side:");
      Assign(x);
      writeln("Enter a matrix for the right-hand side.");
      Assign(y);
      writeln("   The negative of the matrix last entered is:");
      z := -y;
      Print(z);
      writeln();
      writeln("   Addition:");
      Print(x);
      writeln("   +");
      Print(y);
      writeln("   =");
      z := x + y;
      Print(z);
      writeln();
      writeln("   Subtraction:");
      Print(x);
      writeln("   -");
      Print(y);
      writeln("   =");
      z := x - y;
      Print(z);
      writeln("Enter a number for scalar multiplication and division:");
      readln(s);
      n.Parse(s);
      writeln();
      writeln("   Multiplication:");
      s := n.Typeset() + " *";
      writeln(s);
      Print(x);
      writeln("   =");
      z := n * x;
      Print(z);
      writeln();
      writeln("   Division:");
      Print(x);
      s := "   / " + n.Typeset();
      writeln(s);
      writeln("   =");
      z := x / n;
      Print(z)
   end Arithmetic;

   procedure {public} Contractions;
   var
      a, b, c : M.Matrix;
      n : N.Number;
      x, y : A.Array;
   begin
      writeln("Input two matrices to test contraction operations.");
      writeln("Enter the first matrix, call it A:");
      Assign(a);
      writeln("Enter the second matrix, call it B:");
      Assign(b);
      writeln();
      writeln("A =");
      Print(a);
      writeln("B =");
      Print(b);
      writeln();
      writeln("A.Dot(B) = A_{ik} B_{kj} has components:");
      c := a.Dot(b);
      Print(c);
      writeln();
      writeln("A.DotTranspose(B) = A_{ik} B_{jk} has components:");
      c := a.DotTranspose(b);
      Print(c);
      writeln();
      writeln("A.TransposeDot(B) = A_{ki} B_{kj} has components:");
      c := a.TransposeDot(b);
      Print(c);
      writeln();
      writeln("A.DoubleDot(B) = A_{ij} B_{ji} has the value:");
      n := a.DoubleDot(b);
      writeln(n.Typeset());
      writeln();
      writeln("A.TransposeDoubleDot(B) = A_{ji} B_{ji} has the value:");
      n := a.TransposeDoubleDot(b);
      writeln(n.Typeset());
      writeln();
      writeln("Input an array to continue testing contractions:");
      AssignArray(x);
      writeln("X =");
      writeln();
      writeln("A.Contract(X) = A_{ij} X_j has components:");
      y := a.Contract(x);
      PrintArray(y);
      writeln("A.TransposeContract(X) = A_{ji} X_j has components:");
      y := a.TransposeContract(x);
      PrintArray(y);
      writeln()
   end Contractions;

   procedure {public} Functions;
   var
      a : M.Matrix;
      n : N.Number;
   begin
      writeln("Input a matrix to test the various matrix functions.");
      Assign(a);
      writeln("The matrix you input is:");
      Print(a);
      writeln();
      write("Its L1 norm is        ");
      n := M.OneNorm(a);
      writeln(n.Typeset());
      write("Its Frobenius norm is ");
      n := M.FrobeniusNorm(a);
      writeln(n.Typeset());
      write("Its LInfinity norm is ");
      n := M.InfinityNorm(a);
      writeln(n.Typeset());
      a.Normalize(n);
      writeln();
      writeln("The normalized representation of this matrix is:");
      Print(a);
      write("whose magnitude is ");
      writeln(n.Typeset())
   end Functions;

begin
   StringIO;
   writeln;
   Store;
   writeln("Data have been stored in the file");
   asm := Assembly.GetExecutingAssembly();
   loc := asm.Location;
   path := Path.GetDirectoryName(loc);
   dir := Path.Combine(path, "iofiles");
   file := Path.Combine(dir, "testMatrices.dat");
   writeln(file + ".");
   writeln;
   writeln("When read back in to check its integrity, one finds:");
   Load;
   writeln;
   Boolean;
   writeln;
   Arithmetic;
   writeln;
   Contractions;
   writeln;
   Functions;
   writeln;
   writeln("Press 'Enter' to quit.");
   readln;
   L.Close
end Main.