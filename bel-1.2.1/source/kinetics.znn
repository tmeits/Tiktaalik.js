(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2010, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL suite of .NET/mono libraries.                 *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Provides mappings between various stress fields for isochoric membranes.   *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* The deformation gradient has components (see Bel.BI.Kinematics)            *)
(*                 | lambda1   gamma1 |                                       *)
(*          F(t) = |  gamma2  lambda2 |                                       *)
(* with                                                                       *)
(*          lambda3 = 1/(lambda1*lambda2 - gamma1*gamma2)                     *)
(* because the kinematic response is considered to be isochoric.              *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* The mappings are between the following three stress fields:                *)
(*          T   -  is the Kirchhoff stress that, because of the isochoric     *)
(*              -  assumption, is equivalent to the Cauchy stress.            *)
(*          P   -  is the first  Piola-Kirchhoff stress                       *)
(*          S   -  is the second Piola-Kirchhoff stress                       *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Procedures                                                                 *)
(*          PtoS         -  maps P into S                                     *)
(*          PtoT         -  maps P into T                                     *)
(*          StoP         -  maps S into P                                     *)
(*          StoT         -  maps S into T                                     *)
(*          TtoP         -  maps T into P                                     *)
(*          TtoS         -  maps T into S                                     *)
(*          PtoTraction  -  maps P into the traction vector t                 *)
(*          TractionToP  -  maps traction vector t into stress P              *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Reference:  Freed, A.D., Einstein, D.R. and Sacks, M.S., "Hypoelastic      *)
(*             Soft-Tissues, Part II: In-Plane Biaxial Experiments", Acta     *)
(*             Mechanica                                                      *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

module {public} Bel.BI.Kinetics;

   import
      Bel.PF.Units    as U,
      Bel.PF.Scalars  as S,
      Bel.PF.Vectors2 as V,
      Bel.PF.Tensors2 as T,
      Bel.BI.Kinematics as K;

   procedure {public} PtoS (f, p : T.Tensor) : T.Tensor;
   var
      fInv, s : T.Tensor;
   begin
      fInv := K.FInverse(f);
      s := fInv.Dot(p);
      return s
   end PtoS;

   procedure {public} PtoT (f, p : T.Tensor) : T.Tensor;
   var
      t : T.Tensor;
   begin
      t := p.DotTranspose(f);
      return t
   end PtoT;

   procedure {public} StoP (f, s : T.Tensor) : T.Tensor;
   var
      p : T.Tensor;
   begin
      p := f.Dot(s);
      return p
   end StoP;

   procedure {public} StoT (f, s : T.Tensor) : T.Tensor;
   var
      t : T.Tensor;
   begin
      t := f.Dot(s.DotTranspose(f));
      return t
   end StoT;

   procedure {public} TtoP (f, t : T.Tensor) : T.Tensor;
   var
      fInv, p : T.Tensor;
   begin
      fInv := K.FInverse(f);
      p := t.DotTranspose(fInv);
      return p
   end TtoP;

   procedure {public} TtoS (f, t : T.Tensor) : T.Tensor;
   var
      fInv, s : T.Tensor;
   begin
      fInv := K.FInverse(f);
      s := fInv.Dot(t.DotTranspose(fInv));
      return s
   end TtoS;

   procedure {public} PtoTraction (f, p : T.Tensor) : V.Vector;
   var
      t : V.Vector;
   begin
      t.SetUnits(U.Stress);
      t[1] := p[1,1] + p[1,2];
      t[2] := p[2,1] + p[2,2];
      return t
   end PtoTraction;

   procedure {public} TractionToP (f : T.Tensor; t : V.Vector) : T.Tensor;
   var
      denom, g1, g2, l1, l2, l1mg1, l2mg2, t1, t2 : S.Scalar;
      p : T.Tensor;
   begin
      g1 := f[1,2];
      g2 := f[2,1];
      l1 := f[1,1];
      l2 := f[2,2];
      t1 := t[1];
      t2 := t[2];
      l1mg1 := l1 - g1;
      l2mg2 := l2 - g2;
      denom := l1mg1*l1mg1 + l2mg2*l2mg2;
      p.SetUnits(U.Stress);
      p[1,1] := ((l1mg1*l1mg1 + l2*l2mg2)*t1 - g1*l2mg2*t2)/denom;
      p[1,2] := l2mg2*(g1*t2 - g2*t1)/denom;
      p[2,1] := l1mg1*(g2*t1 - g1*t2)/denom;
      p[2,2] := ((l2mg2*l2mg2 + l1*l1mg1)*t2 - g2*l1mg1*t1)/denom;
      return p
   end TractionToP;

begin
end Kinetics.