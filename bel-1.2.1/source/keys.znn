(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2010, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL suite of .NET/mono libraries.                 *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Creates a key for sorting data in data structures used to store data       *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Object      : Key          - a key for sorting data in data structures     *)
(*   method    : Initialize; - implements Bel.Object.Initialize               *)
(*             : Nullify     - implements Bel.Object.Nullify                  *)
(*             : Clone       - implements Bel.Object.Clone                    *)
(*             : Load        - implements Bel.Object.Load                     *)
(*             : Store       - implements Bel.Object.Store                    *)
(*             : Get          - returns the internal data type that is a key  *)
(*             : Set          - assigns the internal data type that is a key  *)
(*                            - once set, a key cannot be reset               *)
(*             : Parse        - converts a string into a key                  *)
(*             : Typeset      - converts a key into a string                  *)
(*             : Equals       - a boolean test of equality between two keys   *)
(*             : LessThan     - a boolean test of less than between two keys  *)
(*             : GreaterThan  - a boolean test of greater than between 2 keys *)
(* Operators   : :=                          - assignment                     *)
(*             : = | # | < | <= | > | >=     - logical operators              *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

module {public} Bel.DATA.Keys;

   import
      System.IO.BinaryReader as BinaryReader,
      System.IO.BinaryWriter as BinaryWriter,
      System.Byte    as Card8,   (* core type of  cardinal{8}  *)
      System.UInt16  as Card16,  (* core type of  cardinal{16} *)
      System.UInt32  as Card32,  (* core type of  cardinal{32} *)
      System.UInt64  as Card64,  (* core type of  cardinal{64} *)
      System.SByte   as Int8,    (* core type of  integer{8}   *)
      System.Int16   as Int16,   (* core type of  integer{16}  *)
      System.Int32   as Int32,   (* core type of  integer{32}  *)
      System.Int64   as Int64,   (* core type of  integer{64}  *)
      System.Double  as Real64,
      System.Convert as Convert,
      Bel.IO.Log as L,
      Bel.Object as Object;

   var {private}
      maxCard : Card64;

   type {private}
      CharArray = array * of char;

   type {public}
      KeyType = Int64;

   type {public, value} Key = object implements Object

      var {private}
         k : KeyType;

      procedure {public} Initialize
         implements Object.Initialize;
      begin
         k := Int64.MinValue
      end Initialize;

      procedure {public} Nullify
         implements Object.Nullify;
      begin
         k := Int64.MinValue
      end Nullify;

      procedure {public} Clone () : object{Object}
         implements Object.Clone;
      var
         c : Key;
         o : object{Object};
      begin
         c.Initialize;
         o := Object(c);
         return o
      end Clone;

      procedure {public} Load (br : BinaryReader)
         implements Object.Load;
      var
         i : Int64;
         s : string;
      begin
         i := br.ReadInt64();
         if k.CompareTo(Int64.MinValue) = 0 then
            k := i
         else
            L.WarningMessage(510,415, "Bel.DATA.Keys.Key.Set")
         end
      end Load;

      procedure {public} Store (bw : BinaryWriter)
         implements Object.Store;
      begin
         bw.Write(k);
         bw.Flush
      end Store;

      procedure {public} Get () : KeyType;
      var
         c : KeyType;
      begin
         c := k;
         return c
      end Get;

      (* a key must be re-Initialized before it can be re-Set *)
      procedure {public} Set (i : KeyType);
      begin
         if k.CompareTo(Int64.MinValue) = 0 then
            k := i
         else
            L.WarningMessage(510,415, "Bel.DATA.Keys.Key.Set")
         end
      end Set;

      procedure {public} Parse (s : string);
      var
         a : CharArray;
         b : array 36 of char;
         i, j : integer;
         y : string;
      begin
         a := new CharArray(len(s)+2);
         copy(s, a);
         (* pass over any leading white space *)
         j := 0;
         while a[j] = " " do
            inc(j)
         end;
         (* read a contiguous array of characters *)
         i := 0;
         repeat
            b[i] := a[j];
            inc(i);
            inc(j);
         until (a[j] = " ") or (j = len(s));
         (* copy this array into a string *)
         a := new CharArray(i+1);
         for j := 0 to i-1 do
            a[j] := b[j]
         end;
         copy(a, y);
         k := Int64.Parse(y)
      end Parse;

      procedure {public} Typeset () : string;
      var
         s : string;
      begin
         s := k.ToString("N0");
         if k.CompareTo(0) > 0 then
            s := " " + s
         end;
         return s
      end Typeset;

      procedure {public} Equals (k : Key) : boolean;
      begin
         return (self.k.CompareTo(k.k) = 0)
      end Equals;

      procedure {public} LessThan (k : Key) : boolean;
      begin
         return (self.k.CompareTo(k.k) < 0)
      end LessThan;

      procedure {public} GreaterThan (k : Key) : boolean;
      begin
         return (self.k.CompareTo(k.k) > 0)
      end GreaterThan;

   begin
      Initialize
   end Key;

   operator {public} ":=" (var l : Key; r : Key);
   begin
      l.Initialize;
      l.Set(r.Get())
   end ":=";

   operator {public} ":=" (var l : Key; r : Int8);
   begin
      l.Initialize;
      l.Set(Convert.ToInt64(r))
   end ":=";

   operator {public} ":=" (var l : Key; r : Int16);
   begin
      l.Initialize;
      l.Set(Convert.ToInt64(r))
   end ":=";

   operator {public} ":=" (var l : Key; r : Int32);
   begin
      l.Initialize;
      l.Set(Convert.ToInt64(r))
   end ":=";

   operator {public} ":=" (var l : Key; r : Int64);
   begin
      l.Initialize;
      l.Set(r)
   end ":=";

   operator {public} ":=" (var l : Key; r : Card8);
   begin
      l.Initialize;
      l.Set(Convert.ToInt64(r))
   end ":=";

   operator {public} ":=" (var l : Key; r : Card16);
   begin
      l.Initialize;
      l.Set(Convert.ToInt64(r))
   end ":=";

   operator {public} ":=" (var l : Key; r : Card32);
   begin
      l.Initialize;
      l.Set(Convert.ToInt64(r))
   end ":=";

   operator {public} ":=" (var l : Key; r : Card64);
   begin
      if r.CompareTo(maxCard) > 0 then
         L.WarningMessage(50,415,
                          "Bel.DATA.Keys operator ':=' for cardinal{64}")
      else
         l.Initialize;
         l.Set(Convert.ToInt64(r))
      end
   end ":=";

   operator {public} "=" (l, r : Key) : boolean;
   begin
      return l.Equals(r)
   end "=";

   operator {public} "#" (l, r : Key) : boolean;
   begin
      return ~l.Equals(r)
   end "#";

   operator {public} "<" (l, r : Key) : boolean;
   begin
      return l.LessThan(r)
   end "<";

   operator {public} "<=" (l, r : Key) : boolean;
   begin
      return ~l.GreaterThan(r)
   end "<=";

   operator {public} ">" (l, r : Key) : boolean;
   begin
      return l.GreaterThan(r)
   end ">";

   operator {public} ">=" (l, r : Key) : boolean;
   begin
      return ~l.LessThan(r)
   end ">=";

begin
   maxCard := Convert.ToUInt64(Int64.MaxValue)
end Keys.