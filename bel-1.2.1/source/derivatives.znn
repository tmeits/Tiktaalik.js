(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2010, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL suite of .NET/mono libraries.                 *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Provides procedures for estimating the derivative of a function: dy(x)/dx  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Type       : Method     -  select method for estimating a derivative   *)
(*                  forward    :  (df(x+h) - df(x))/h                         *)
(*                  central    :  (df(x+h) - df(x-h))/2h                      *)
(*                  backward   :  (df(x) - df(x-h))/h                         *)
(*                  richardson :  extrapolate to specified tolerance          *)
(* Type       : Y              -  a procedure type                            *)
(*                  x          :  argument of the function                    *)
(* Procedure  : Differentiate  -  dy(x)/dx                                    *)
(*                  y          :  an instance of Y                            *)
(*                  x          :  location where the derivative is sought     *)
(*                  h          :  step size to employ in the differencing     *)
(*                  d          :  an instance of Method                   *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

module {public} Bel.MATH.Derivatives;

   import
      Bel.IO.Log as L,
      Bel.MF.Numbers as N,
      Bel.MF.Arrays  as A,
      Bel.MATH.Functions as Fn;

   type {public}
      (* selects the method of differencing *)
      Method = (forward, central, backward, richardson);
      (* function type whose derivative is sought *)
      Y = procedure (N.Number) : N.Number;

   const
      (* stops Richardson extrapolation when the count hits this number *)
      maxIterations = 100;
      (* stops Richardson extrapolation when the error goes below this  *)
      tolerance     = 0.0000000001;

   procedure {public} Differentiate
                      (y : Y; x, h : N.Number; m : Method) : N.Number;
   var
      dCurr, dLast : A.Array;
      dydx, eCurr, eLast, p : N.Number;
      i, k : integer;
   begin
      if y # nil then
         case m of Method.forward :
            dydx := (y(x+h) - y(x))/h
         | Method.central :
            dydx := (y(x+h) - y(x-h))/(2.0*h)
         | Method.backward :
            dydx := (y(x) - y(x-h))/h
         | Method.richardson :
            k := 1;
            dCurr.Create(k);
            dCurr[1] := Differentiate(y, x, h, Method.central);
            eCurr := N.MaximumPositiveNumber;
            loop
               inc(k);
               h := h/2;
               p := 4;
               dLast := dCurr;
               dCurr.Create(k);
               dCurr[1] := Differentiate(y, x, h, Method.central);
               for i := 2 to k do
                  p := 4*p;
                  dCurr[i] := dCurr[i-1] + (dCurr[i-1] - dLast[i-1])/(p - 1)
               end;
               eLast := eCurr;
               if Fn.Abs(dCurr[k]) < 1 then
                  eCurr := Fn.Abs(dCurr[k] - dLast[k-1])
               else
                  eCurr := Fn.Abs((dCurr[k] - dLast[k-1])/dCurr[k])
               end;
               if eCurr < tolerance then
                  dydx := dCurr[k];
                  exit
               end;
               if eCurr > eLast then
                  dydx := dLast[k-1];
                  L.WarningMessage(55,-1, "Bel.MATH.Derivatives.Differentiate");
                  exit
               end;
               if k > maxIterations then
                  dydx := dCurr[k];
                  L.WarningMessage(80,-1, "Bel.MATH.Derivatives.Differentiate");
                  exit
               end
            end
         else
            L.WarningMessage(70,415, "Bel.MATH.Derivatives.Differentiate")
         end
      else
         L.WarningMessage(500,415, "Bel.MATH.Derivatives.Differentiate")
      end;
      return dydx
   end Differentiate;

begin
end Derivatives.