(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2010, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL suite of .NET/mono libraries.                 *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Creates a persistent double-linked list for data storage                   *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Object      : ListNode    - a node for double-linked lists                 *)
(*   method    : Initialize  - called internally at object creation           *)
(*   var       : data        - a link to where the actual data are stored     *)
(*             : key         - a key used for locating (sorting) the node     *)
(*             : next        - a link to the next node in the list            *)
(*             : prev        - a link to the previous node in the list        *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Object      : List        - a doubly-linked data structure                 *)
(*   method    : Initialize; - implements Bel.Object.Initialize               *)
(*             : Nullify     - implements Bel.Object.Nullify                  *)
(*             : Clone       - implements Bel.Object.Clone                    *)
(*             : Load        - implements Bel.Object.Load                     *)
(*             : Store       - implements Bel.Object.Store                    *)
(*             : Configure   - specifies the data type for list insertion     *)
(*             : Length      - returns the number of nodes in the list        *)
(*             : Delete      - removes datum (at specified key) from the list *)
(*             : Insert      - places a new datum into the list               *)
(*    # additional procedures for managing a list via its rider               *)
(*             : Find        - searchs for a specified key in the list        *)
(*             : Home        - moves the rider to its home node               *)
(*             : Next        - ratchets the rider to the next node            *)
(*             : Previous    - ratchets the rider to the previous node        *)
(*             : GetData     - gets the datum at the rider's current position *)
(*             : GetKey      - gets the key at the rider's current position   *)
(*             : Update      - replaces the datum at that node in the list    *)
(*                             with the matching key                          *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* The programmer needs to know a priori the data type held within a data     *)
(* structure that has been stored to file before it can be read back in.      *)
(* To read data in from a binary file, program the following steps:           *)
(*    i)   specify what type of data are to be read in from file by calling   *)
(*            <name of new data structure>.Configure(<clone of stored data>); *)
(*    ii)  read data in from the file                                         *)
(*            <name of new data structure>.Load(<reader to the binary file>); *)
(* If a data structure is to be persistent, it must only hold 1 type of data  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

object {public, ref} Bel.ListNode;

   import
      Bel.Object      as Object,
      Bel.EmptyObject as EmptyO,
      Bel.DATA.Keys   as K;

   var {public}
      data : object{Object};
      key  : K.Key;
      next, prev : ListNode;

   procedure {public} Initialize;
   var
      e : EmptyO;
   begin
      data := Object(e);
      key.Initialize;
      next := nil;
      prev := nil
   end Initialize;

begin
   Initialize
end ListNode.


object {public, value} Bel.DATA.List implements Bel.Object;

   import
      System.Int32    as Int32,
      Bel.EmptyObject as EmptyO,
      Bel.IO.Log      as L,
      Bel.DATA.Keys   as K,
      Bel.ListNode    as N;

   var {private}
      clone       : object{Object};
      home, rider : N;
      length      : integer;

   procedure {public} Initialize
      implements Bel.Object.Initialize;
   var
      e : EmptyO;
   begin
      clone  := Object(e);
      home   := nil;
      length := 0;
      rider  := nil
   end Initialize;

   procedure {public} Nullify
      implements Bel.Object.Nullify;
   var
      n : N;
   begin
      n := home;
      while n # nil do
         n.data.Nullify;
         n := n.next;
         if n # nil then
            n.prev.next := nil;
            n.prev := nil
         end
      end;
      Initialize
   end Nullify;

   procedure {public} Clone () : object{Object}
      implements Bel.Object.Clone;
   var
      l : List;
      o : object{Object};
   begin
      l.Initialize;
      o := Object(l);
      return o
   end Clone;

   procedure {public} Load (br : BinaryReader)
      implements Bel.Object.Load;
   var
      i, j : integer;
      k : K.Key;
      o : object{Object};
      success : boolean;
   begin
      home   := nil;
      rider  := nil;
      length := 0;
      j := br.ReadInt32();
      for i := 1 to j do
         o := clone.Clone();
         o.Load(br);
         k.Load(br);
         Insert(o, k, success)
      end
   end Load;

   procedure {public} Store (bw : BinaryWriter)
      implements Bel.Object.Store;
   var
      i : integer;
      j : Int32;
      n : N;
   begin
      j := length;
      bw.Write(j);
      n := home;
      for i := 1 to length do
         n.data.Store(bw);
         n.key.Store(bw);
         n := n.next
      end;
      bw.Flush
   end Store;

   procedure {public} Configure (dataClone : object{Object});
   begin
      Initialize;
      clone := dataClone.Clone()
   end Configure;

   procedure {public} Length () : integer;
   begin
      return length
   end Length;

   procedure {public} Delete (key : K.Key; var success : boolean);
   var
      e : EmptyO;
   begin
      Find(key, success);
      if success then
         if length = 1 then
            home := nil
         elsif length = 2 then
            if rider = home then
               home := rider.next;
               home.prev := nil;
               rider.next := nil
            else
               home.next := nil;
               rider.prev := nil
            end
         else
            if rider = home then
               home := rider.next;
               home.prev := nil;
               rider.next := nil
            elsif rider.next = nil then
               rider.prev.next := nil;
               rider.prev := nil
            else
               rider.prev.next := rider.next;
               rider.next.prev := rider.prev;
               rider.next := nil;
               rider.prev := nil
            end
         end;
         rider.data.Nullify;
         rider.data := e;
         dec(length);
         Home
      end
   end Delete;

   procedure {public} Insert
      (datum : object{Object}; key : K.Key; var success : boolean);
   var
      left, n, right : N;
   begin
      if length <= 0 then
         Configure(datum)
      end;
      n := new N;
      if length = 0 then
         home := n;
         rider := n;
         success := true
      else
         if key < home.key then
            n.next := home;
            home.prev := n;
            home := n;
            success := true
         elsif key = home.key then
            success := false;
            L.WarningMessage(511,415, "Bel.DATA.List.Insert")
         else
            left := home;
            right := home.next;
            loop
               if right = nil then
                  left.next := n;
                  n.prev := left;
                  success := true;
                  exit
               end;
               if key < right.key then
                  left.next := n;
                  right.prev := n;
                  n.prev := left;
                  n.next := right;
                  success := true;
                  exit
               end;
               if key = right.key then
                  success := false;
                  L.WarningMessage(511,415, "Bel.DATA.List.Insert");
                  exit
               end;
               left := right;
               right := right.next
            end
         end
      end;
      if success then
         n.data := datum;
         n.key  := key;
         inc(length)
      end
   end Insert;

   (* the following procedures allow the user to explore a list *)

   procedure {public} Find (key : K.Key; var found : boolean);
   begin
      Home;
      found := false;
      loop
         if rider = nil then
            Home;
            exit
         end;
         if key = rider.key then
            found := true;
            exit
         end;
         if key < rider.key then
            Home;
            exit
         end;
         rider := rider.next
      end
   end Find;

   procedure {public} Home;
   begin
      rider := home
   end Home;

   procedure {public} Next (var moved : boolean);
   begin
      if (rider # nil) & (rider.next # nil) then
         rider := rider.next;
         moved := true
      else
         moved := false
      end
   end Next;

   procedure {public} Previous (var moved : boolean);
   begin
      if (rider # nil) & (rider.prev # nil) then
         rider := rider.prev;
         moved := true
      else
         moved := false
      end
   end Previous;

   procedure {public} GetData () : object{Object};
   var
      o : object{Object};
   begin
      o := Object(rider.data);
      return o
   end GetData;

   procedure {public} GetKey () : K.Key;
   var
      k : K.Key;
   begin
      k := rider.key;
      return k
   end GetKey;

   procedure {public} Update
      (datum : object{Object}; key : K.Key; var success : boolean);
   begin
      if rider # nil then
         Find(key, success);
         if success then
            rider.data.Nullify;
            rider.data := datum
         else
            Insert(datum, key, success)
         end
      else
         success := false;
         L.WarningMessage(500,415, "Bel.DATA.List.Update")
      end;
      Home
   end Update;

begin
   Initialize
end List.