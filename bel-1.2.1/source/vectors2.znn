(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIO                                  *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2010, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL suite of .NET/mono libraries.                 *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Defines a physical vector field, 2x1 array of scalars, v = {v1, v2}^T      *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* The row indexer goes from 1..2, not from 0..1 as in Zonnon and C           *)
(* IMPORTANT: When using index notation to assign values to a vector, make    *)
(*            sure that you import Bel.PF.Scalars so that any 'overloaded'    *)
(*            assignments, like v[i] := s, can take place behind the scene.   *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Object      : Vector        - an 2x1 array of reals with SI units          *)
(*                             - it has no component normal to the plane      *)
(*    methods  : Initialize;   - implements Bel.Object.Initialize             *)
(*             : Nullify       - implements Bel.Object.Nullify                *)
(*             : Clone         - implements Bel.Object.Clone                  *)
(*             : Load          - implements Bel.Object.Load                   *)
(*             : Store         - implements Bel.Object.Store                  *)
(*             : Get           - implements [].Get                            *)
(*             : Set           - implements [].Set                            *)
(*             : Negative      - implements Bel.Field.Negative                *)
(*             : Add           - implements Bel.Field.Add                     *)
(*             : Subtract      - implements Bel.Field.Subtract                *)
(*             : Multiply      - implements Bel.Field.Multiply                *)
(*             : Divide        - implements Bel.Field.Divide                  *)
(*             : Parse         - converts a string into a vector instance     *)
(*             : Typeset       - converts a vector instance into a string     *)
(*             : GetUnits      - returns the units part of a vector field     *)
(*             : SetUnits      - assigns the units part of a vector field     *)
(*             : GetArray      - retrieves the internal array, less its units *)
(*             : SetArray      - assigns the internal array, less its units   *)
(*             : IsVoid        - boolean check for absense of dimensionality  *)
(*             : Equals        - checks two vectors for equality              *)
(*             : Dot           - returns the dot product between two vectors  *)
(* Operators   : :=            - assignment                                   *)
(*             : -             - uniary  operator                             *)
(*             : = | #         - logical operators                            *)
(*             : + | - | * | / - binary  operators                            *)
(* Functions   : Norm          - returns the Euclidean norm of a vector       *)
(*             : UnitVector    - scales a vector so that its norm equals 1    *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

module {public} Bel.PF.Vectors2;

   import
      System.IO.BinaryReader as BinaryReader,
      System.IO.BinaryWriter as BinaryWriter,
      System.Byte   as Card8,   (* core type of  cardinal{8}  *)
      System.UInt16 as Card16,  (* core type of  cardinal{16} *)
      System.UInt32 as Card32,  (* core type of  cardinal{32} *)
      System.UInt64 as Card64,  (* core type of  cardinal{64} *)
      System.SByte  as Int8,    (* core type of  integer{8}   *)
      System.Int16  as Int16,   (* core type of  integer{16}  *)
      System.Int32  as Int32,   (* core type of  integer{32}  *)
      System.Int64  as Int64,   (* core type of  integer{64}  *)
      System.Single as Real32,  (* core type of  real{32}     *)
      System.Double as Real64,  (* core type of  real{64}     *)
      Bel.IO.Log as L,
      Bel.MF.Numbers as N,
      Bel.MF.Arrays  as A,
      Bel.MATH.Functions as M,
      Bel.PF.Scalars as S,
      Bel.PF.Units   as U,
      Bel.Object as Object,
      Bel.Field  as Field;

   var {private}
      zero, one : N.Number;

   type {private}
      CharArray = array * of char;

   type {public, value} Vector = object implements [], Field

      var {private}
         u : U.Si;
         v : A.Array;

      procedure {public} Initialize
         implements Object.Initialize;
      begin
         u.Initialize;
         v.Create(2)
      end Initialize;

      procedure {public} Nullify
         implements Object.Nullify;
      begin
         u.Nullify;
         v.Nullify
      end Nullify;

      procedure {public} Clone () : object{Object}
         implements Object.Clone;
      var
         o : object{Object};
         vec : Vector;
      begin
         vec.u := U.Si(u.Clone());
         vec.v := A.Array(v.Clone());
         o := Object(vec);
         return o
      end Clone;

      procedure {public} Load (br : BinaryReader)
         implements Object.Load;
      begin
         u.Load(br);
         v.Load(br)
      end Load;

      procedure {public} Store (bw : BinaryWriter)
         implements Object.Store;
      begin
         u.Store(bw);
         v.Store(bw)
      end Store;

      procedure {public} Get (row : integer) : S.Scalar
         implements [].Get;
      var
         s : S.Scalar;
      begin
         s.Set(v.Get(row));
         s.SetUnits(u);
         return s
      end Get;

      procedure {public} Set (row : integer; s : S.Scalar)
         implements [].Set;
      begin
         if u = s.GetUnits() then
            v.Set(row, s.Get())
         else
            L.ErrorMessage(200,-1, "Bel.PF.Vectors2.Vector.Set")
         end
      end Set;

      procedure {public} Negative () : object{Field}
         implements Field.Negative;
      var
         g : object{Field};
         vec : Vector;
      begin
         vec.u := u;
         vec.v := -v;
         g := Field(vec);
         return g
      end Negative;

      procedure {public} Add (f : object{Field}) : object{Field}
         implements Field.Add;
      var
         a : A.Array;
         g : object{Field};
         r, vec : Vector;
      begin
         if f is Vector then
            r := Vector(f);
            if u = r.u then
               vec.u := u;
               vec.v := v + r.v
            else
               L.ErrorMessage(201,-1, "Bel.PF.Vectors2.Vector.Add")
            end
         elsif f is A.Array then
            if IsVoid() then
               a := A.Array(f);
               if a.Length() = 2 then
                  vec.v := v + a
               else
                  L.ErrorMessage(210,-1, "Bel.PF.Vectors2.Vector.Add")
               end
            else
               L.ErrorMessage(201,-1, "Bel.PF.Vectors2.Vector.Add")
            end
         else
            L.ErrorMessage(501,-1, "Bel.PF.Vectors2.Vector.Add")
         end;
         g := Field(vec);
         return g
      end Add;

      procedure {public} Subtract (f : object{Field}) : object{Field}
         implements Field.Subtract;
      var
         a : A.Array;
         g : object{Field};
         r, vec : Vector;
      begin
         if f is Vector then
            r := Vector(f);
            if u = r.u then
               vec.u := u;
               vec.v := v - r.v
            else
               L.ErrorMessage(201,-1, "Bel.PF.Vectors2.Vector.Subtract")
            end
         elsif f is A.Array then
            if IsVoid() then
               a := A.Array(f);
               if a.Length() = 2 then
                  vec.v := v - a
               else
                  L.ErrorMessage(210,-1, "Bel.PF.Vectors2.Vector.Subtract")
               end
            else
               L.ErrorMessage(201,-1, "Bel.PF.Vectors2.Vector.Subtract")
            end
         else
            L.ErrorMessage(501,-1, "Bel.PF.Vectors2.Vector.Subtract")
         end;
         g := Field(vec);
         return g
      end Subtract;

      procedure {public} Multiply (f : object{Field}) : object{Field}
         implements Field.Multiply;
      var
         g : object{Field};
         n : N.Number;
         s : S.Scalar;
         vec : Vector;
      begin
         if f is S.Scalar then
            s := S.Scalar(f);
            n := s.Get();
            vec.u := u + s.GetUnits();
            vec.v := n*v
         elsif f is N.Number then
            n := N.Number(f);
            vec.u := u;
            vec.v := n*v
         else
            L.ErrorMessage(501,-1, "Bel.PF.Vectors2.Vector.Multiply")
         end;
         g := Field(vec);
         return g
      end Multiply;

      procedure {public} Divide (f : object{Field}) : object{Field}
         implements Field.Divide;
      var
         g : object{Field};
         n : N.Number;
         s : S.Scalar;
         vec : Vector;
      begin
         if f is S.Scalar then
            s := S.Scalar(f);
            n := s.Get();
            vec.u := u - s.GetUnits();
            vec.v := v/n
         elsif f is N.Number then
            n := N.Number(f);
            vec.u := u;
            vec.v := v/n
         else
            L.ErrorMessage(501,-1, "Bel.PF.Vectors2.Vector.Divide")
         end;
         g := Field(vec);
         return g
      end Divide;

      (* Additional methods not defined via an iterface *)

      procedure {public} Parse (s : string);
      var
         a, b : CharArray;
         c : array 36 of char;
         i, j, k : integer;
         n : N.Number;
         y : string;
      begin {locked}
         a := new CharArray(len(s)+2);
         copy(s, a);
         (* pass over any leading white space and leading parenthesis *)
         j := 0;
         while (a[j] = " ") or (a[j] = "{") do
            inc(j)
         end;
         (* read the first contiguous array of characters *)
         i := 0;
         repeat
            c[i] := a[j];
            inc(i);
            inc(j);
         until a[j] = " ";
         (* copy this array, the first number, into a string and parse it *)
         b := new CharArray(i+1);
         for k := 0 to i-1 do
            b[k] := c[k]
         end;
         copy(b, y);
         n.Parse(y);
         v[1] := n;
         y := "";
         (* pass over any leading white space *)
         while a[j] = " " do
            inc(j)
         end;
         (* read the second contiguous array of characters *)
         i := 0;
         repeat
            c[i] := a[j];
            inc(i);
            inc(j);
         until (a[j] = " ") or (a[j] = "}");
         (* copy this array, the second number, into a string and parse it *)
         b := new CharArray(i+1);
         for k := 0 to i-1 do
            b[k] := c[k]
         end;
         copy(b, y);
         n.Parse(y);
         v[2] := n;
         y := "";
         (* move onto the units *)
         repeat
            inc(j)
         until a[j] = "T";
         while a[j] = " " do
            inc(j)
         end;
         (* read the final string of contiguous array of characters *)
         i := 0;
         repeat
            c[i] := a[j];
            inc(i);
            inc(j);
         until (a[j] = " ") or (j = len(s));
         (* copy this array, the units, into a string and parse it *)
         b := new CharArray(i+1);
         for k := 0 to i-1 do
            b[k] := c[k]
         end;
         copy(b, y);
         u.Parse(y)
      end Parse;

      procedure {public} Typeset () : string;
      var
         i : integer;
         r : N.Number;
         s : string;
      begin
         r := v[1];
         s := "{" + r.ToString(7);
         for i := len(s) to 18 do
            s := s + " "
         end;
         r := v[2];
         s := s + r.ToString(7);
         for i := len(s) to 33 do
            s := s + " "
         end;
         s := s + "}^T ";
         s := s + u.Typeset();
         return s
      end Typeset;

      procedure {public} GetUnits () : U.Si;
      var
         si : U.Si;
      begin
         si := u;
         return si
      end GetUnits;

      procedure {public} SetUnits (si : U.Si);
      begin
         u := si
      end SetUnits;

      procedure {public} GetArray () : A.Array;
      var
         a : A.Array;
      begin
         a := v;
         return a
      end GetArray;

      procedure {public} SetArray (a : A.Array);
      var
         i : integer;
      begin
         if a.Length() = 2 then
            v := a
         else
            L.ErrorMessage(210,-1, "Bel.PF.Vectors2.Vector.SetArray")
         end
      end SetArray;

      procedure {public} IsVoid () : boolean;
      begin
         return u.IsVoid()
      end IsVoid;

      procedure {public} Equals (vr : Vector) : boolean;
      begin
         return ((u = vr.u) & (v = vr.v))
      end Equals;

      procedure {public} Dot (vr : Vector) : S.Scalar;
      var
         y : S.Scalar;
      begin
         y.Set(v.Dot(vr.v));
         y.SetUnits(u + vr.u);
         return y
      end Dot;

   begin
      Initialize
   end Vector;

   (* OVERLOADED OPERATORS *)

   operator {public} ':=' (var l : Vector; r : Vector);
   begin
      l.SetUnits(r.GetUnits());
      l.SetArray(r.GetArray())
   end ':=';

   operator {public} ':=' (var l : Vector; r : A.Array);
   begin
      if r.Length() = 2 then
         l.SetArray(r);
         l.SetUnits(U.Dimensionless)
      else
         L.ErrorMessage(210,-1, "Bel.PF.Vectors2.':='")
      end
   end ':=';

   (* places wrappers around the associated vector methods *)

   operator {public} '-' (v : Vector) : Vector;
   begin
      return Vector(v.Negative())
   end '-';

   (* logic operators *)

   operator {public} '=' (l, r : Vector) : boolean;
   begin
      return l.Equals(r)
   end '=';

   operator {public} '=' (l : Vector; r : A.Array) : boolean;
   begin
      if r.Length() = 2 then
         if l.IsVoid() then
            return (r = l.GetArray())
         else
            return false
         end
      else
         return false
      end
   end '=';

   operator {public} '=' (l : A.Array; r : Vector) : boolean;
   begin
      if l.Length() = 2 then
         if r.IsVoid() then
            return (l = r.GetArray())
         else
            return false
         end
      else
         return false
      end
   end '=';

   operator {public} '#' (l, r : Vector) : boolean;
   begin
      return ~l.Equals(r)
   end '#';

   operator {public} '#' (l : Vector; r : A.Array) : boolean;
   begin
      if r.Length() = 2 then
         if l.IsVoid() then
            return (r # l.GetArray())
         else
            return true
         end
      else
         return true
      end
   end '#';

   operator {public} '#' (l : A.Array; r : Vector) : boolean;
   begin
      if l.Length() = 2 then
         if r.IsVoid() then
            return (l # r.GetArray())
         else
            return true
         end
      else
         return true
      end
   end '#';

   (* arithemtic operators *)

   operator {public} '+' (l, r : Vector) : Vector;
   begin
      return Vector(l.Add(r))
   end '+';

   operator {public} '+' (l : Vector; r : A.Array) : Vector;
   begin
      return Vector(l.Add(r))
   end '+';

   operator {public} '+' (l : A.Array; r : Vector) : Vector;
   begin
      return Vector(r.Add(l))
   end '+';

   operator {public} '-' (l, r : Vector) : Vector;
   begin
      return Vector(l.Subtract(r))
   end '-';

   operator {public} '-' (l : Vector; r : A.Array) : Vector;
   begin
      return Vector(l.Subtract(r))
   end '-';

   operator {public} '-' (l : A.Array; r : Vector) : Vector;
   var
      v : Vector;
   begin
      v := Vector(r.Subtract(l));
      return Vector(v.Negative())
   end '-';

   operator {public} '*' (l : S.Scalar; r : Vector) : Vector;
   begin
      return Vector(r.Multiply(l))
   end '*';

   operator {public} '*' (l : N.Number; r : Vector) : Vector;
   begin
      return Vector(r.Multiply(l))
   end '*';

   operator {public} '*' (l : Card8; r : Vector) : Vector;
   var
      n : N.Number;
   begin
      n := l;
      return Vector(r.Multiply(n))
   end '*';

   operator {public} '*' (l : Card16; r : Vector) : Vector;
   var
      n : N.Number;
   begin
      n := l;
      return Vector(r.Multiply(n))
   end '*';

   operator {public} '*' (l : Card32; r : Vector) : Vector;
   var
      n : N.Number;
   begin
      n := l;
      return Vector(r.Multiply(n))
   end '*';

   operator {public} '*' (l : Card64; r : Vector) : Vector;
   var
      n : N.Number;
   begin
      n := l;
      return Vector(r.Multiply(n))
   end '*';

   operator {public} '*' (l : Int8; r : Vector) : Vector;
   var
      n : N.Number;
   begin
      n := l;
      return Vector(r.Multiply(n))
   end '*';

   operator {public} '*' (l : Int16; r : Vector) : Vector;
   var
      n : N.Number;
   begin
      n := l;
      return Vector(r.Multiply(n))
   end '*';

   operator {public} '*' (l : Int32; r : Vector) : Vector;
   var
      n : N.Number;
   begin
      n := l;
      return Vector(r.Multiply(n))
   end '*';

   operator {public} '*' (l : Int64; r : Vector) : Vector;
   var
      n : N.Number;
   begin
      n := l;
      return Vector(r.Multiply(n))
   end '*';

   operator {public} '*' (l : Real32; r : Vector) : Vector;
   var
      n : N.Number;
   begin
      n := l;
      return Vector(r.Multiply(n))
   end '*';

   operator {public} '*' (l : Real64; r : Vector) : Vector;
   var
      n : N.Number;
   begin
      n := l;
      return Vector(r.Multiply(n))
   end '*';

   operator {public} '/' (l : Vector; r : S.Scalar) : Vector;
   begin
      return Vector(l.Divide(r))
   end '/';

   operator {public} '/' (l : Vector; r : N.Number) : Vector;
   begin
      return Vector(l.Divide(r))
   end '/';

   operator {public} '/' (l : Vector; r : Card8) : Vector;
   var
      n : N.Number;
   begin
      n := r;
      return Vector(l.Divide(n))
   end '/';

   operator {public} '/' (l : Vector; r : Card16) : Vector;
   var
      n : N.Number;
   begin
      n := r;
      return Vector(l.Divide(n))
   end '/';

   operator {public} '/' (l : Vector; r : Card32) : Vector;
   var
      n : N.Number;
   begin
      n := r;
      return Vector(l.Divide(n))
   end '/';

   operator {public} '/' (l : Vector; r : Card64) : Vector;
   var
      n : N.Number;
   begin
      n := r;
      return Vector(l.Divide(n))
   end '/';

   operator {public} '/' (l : Vector; r : Int8) : Vector;
   var
      n : N.Number;
   begin
      n := r;
      return Vector(l.Divide(n))
   end '/';

   operator {public} '/' (l : Vector; r : Int16) : Vector;
   var
      n : N.Number;
   begin
      n := r;
      return Vector(l.Divide(n))
   end '/';

   operator {public} '/' (l : Vector; r : Int32) : Vector;
   var
      n : N.Number;
   begin
      n := r;
      return Vector(l.Divide(n))
   end '/';

   operator {public} '/' (l : Vector; r : Int64) : Vector;
   var
      n : N.Number;
   begin
      n := r;
      return Vector(l.Divide(n))
   end '/';

   operator {public} '/' (l : Vector; r : Real32) : Vector;
   var
      n : N.Number;
   begin
      n := r;
      return Vector(l.Divide(n))
   end '/';

   operator {public} '/' (l : Vector; r : Real64) : Vector;
   var
      n : N.Number;
   begin
      n := r;
      return Vector(l.Divide(n))
   end '/';

   (* vector functions *)

   (* this is the vector or Euclidean norm *)
   procedure {public} Norm (v : Vector) : S.Scalar;
   var
      y : S.Scalar;
   begin
      y.Set(A.TwoNorm(v.GetArray()));
      y.SetUnits(v.GetUnits());
      return y
   end Norm;

   (* unit vectors are dimensionless vectors with a norm of 1 *)
   procedure {public} UnitVector (v : Vector) : Vector;
   var
      i : integer;
      mag, re : N.Number;
      norm, s, s0 : S.Scalar;
      uv : Vector;
   begin
      norm := Norm(v);
      mag := norm.Get();
      if mag > zero then
         uv := Vector(v.Divide(norm));
         s0 := zero;
         for i := 1 to 2 do
            (* set all effective zeros to zero *)
            s := uv[i];
            re := s.Get();
            if M.Abs(re) < N.Epsilon then
               uv[i] := s0
            end
         end
      else
         L.ErrorMessage(220,-1, "Bel.PF.Vectors2.UnitVector")
      end;
      return uv
   end UnitVector;

begin
   zero := 0.0E+0;
   one  := 1.0E+0
end Vectors2.