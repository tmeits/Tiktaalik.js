(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2010, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL suite of .NET/mono libraries.                 *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* This file is 6 of 7 creating a genetic algorithm for parameter estimation  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* SGA stands for Simple Genetic Algorithm.  SGA was originally written in    *)
(* Pascal, and is nicely documented in the textbook:                          *)
(*   Goldberg, D. E., "Genetic Algorithms in search, optimization & machine   *)
(*                     learning," Addison-Wesley, Boston, 1989.               *)
(* David Goldberg's original SGA code carries the following copywrite notice: *)
(*   { A Simple Genetic Algorithm - SGA - v1.0 }                              *)
(*   { (c)   David Edward Goldberg  1986       }                              *)
(*   {       All Rights Reserved               }                              *)
(* This reinterpretation of Goldberg's original SGA is written in Zonnon - a  *)
(* direct decendent of Pascal.  It is a complete rewrite of SGA.  In this     *)
(* rewrite, efforts have been made to keep true to the spirit of Goldberg's   *)
(* original SGA algorithms.  Formulae used to determine the population size,  *)
(* the number of contestants for tournament play, and the number of           *)
(* generations needed for convergence came from his second book:              *)
(*   Goldberg, D. E., "The Design of Innovation : Lessons from and for        *)
(*                     Competent Genetic Algorithms," Kluwer, Boston, 2002.   *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Type                                                                       *)
(*   Colony                                                                   *)
(*      Methods                                                               *)
(*         Initialize          - prepares the GA for optimization             *)
(*         Propagate           - advances the GA to the next generation       *)
(*         Parameters          - returns 'best' set of material parameters    *)
(*         ConfidentParameters - all parameter sets inside confidence region  *)
(*         ConfidenceIntervals - range of each parameter inside this region   *)
(*         ReportHeader        - writes out the header to a report file       *)
(*         ReportBody          - writes out statistics for current generation *)
(*         ReportFooter        - writes out the footer to a report file       *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

module {public} Bel.GA.Colonies;

   import
      System.IO.StreamReader as StreamReader,
      System.IO.StreamWriter as StreamWriter,
      System.Int32 as Int,
      Bel.IO.TextFiles as F,
      Bel.DATA.Keys as Keys,
      Bel.DATA.List as List,
      Bel.MF.Numbers  as N,
      Bel.MF.Arrays   as A,
      Bel.MF.Matrices as M,
      Bel.MATH.Distributions as D,
      Bel.MATH.Functions     as Fn,
      Bel.MATH.LinearAlgebra as LA,
      Bel.GA.Statistics  as S,
      Bel.GA.Chromosomes as C,
      Bel.GA.Genomes     as G,
      Bel.GA.Individuals as I,
      Bel.Chromosome as Chromosome,
      Bel.Object as Object;

   type {private}
      BooleanArray = array * of boolean;

   type {public}
      Inhabitants = array * of I.Individual;

   type {public, ref} Colony = object

      var {private}
         adults, children, contestants : Inhabitants;
         ancestory : List;
         crossoverProbability, immigrationProbability, maxFitness,
            meanFitness, minFitness, mutationProbability : N.Number;
         generation, lines, numberOfBorn, numberOfContestants,
            numberOfCrossovers, numberOfGenerations, numberOfGenes,
            numberOfImmigrants, numberOfMutations, numberOfParameters,
            numberOfSigFigures, populationSize : integer;
         elite : I.Individual;
         fixParam, maxParam, minParam : A.Array;
         percentagePoint : D.Certainty;
         typeOfChromosome : G.ChromosomeType;
         varParam : BooleanArray;
         writer : StreamWriter;

      procedure {private} Update (var converged : boolean);
      var
         i : integer;
         individual : I.Individual;
         key : Keys.Key;
         success : boolean;
         sum : N.Number;
      begin
         inc(generation);
         sum := 0;
         maxFitness := 0;
         minFitness := 1;
         for i := 0 to populationSize-1 do
             individual := adults[i];
             if individual.lineage.fitness > maxFitness then
                elite := individual;
                maxFitness := individual.lineage.fitness
             end;
             if individual.lineage.fitness < minFitness then
                minFitness := individual.lineage.fitness
             end;
             sum := sum + individual.lineage.fitness;
             key.Initialize;
             key := individual.lineage.birthID;
             ancestory.Insert(individual.lineage, key, success);
             if success then
                inc(numberOfBorn)
             end
         end;
         meanFitness := sum/populationSize;
         if generation < numberOfGenerations then
            converged := false
         else
            converged := true
         end
      end Update;

      procedure {public} Initialize (expControl, expInput, expOutput : M.Matrix;
                                     expEndsAtIndex, decimateTo : A.Array;
                                     method : S.LeastSquares;
                                     numericalModel : S.Model;
                                     solveModelWithDecimatedDataOnly : boolean;
                                     fixedParameters, alienParameters,
                                     minParameters, maxParameters : A.Array;
                                     varyParameters : array * of boolean;
                                     dimensionOfSchemata,
                                     numberOfSignificantFigures : integer;
                                     confidenceIntervalCertainty : D.Certainty;
                                     probabilityOfCrossover,
                                     probabilityOfMutation,
                                     probabilityOfImmigration : N.Number;
                                     chromosomeType : G.ChromosomeType);
      var
         alphabet, genes, lifeCycles, players, popSize, schemata : N.Number;
         chromosome : object{Chromosome};
         converged : boolean;
         genome : G.Genome;
         i : integer;
         individual : I.Individual;
      begin
         ancestory.Initialize;
         S.Configure(expControl, expInput, expOutput,
                     expEndsAtIndex, decimateTo, method,
                     numericalModel, solveModelWithDecimatedDataOnly);
         percentagePoint := confidenceIntervalCertainty;
         elite := new I.Individual;
         elite.Initialize(fixedParameters, varyParameters);
         generation := 0;
         numberOfBorn       := 0;
         numberOfCrossovers := 0;
         numberOfMutations  := 0;
         numberOfImmigrants := 0;
         (* introduce the 'alien' into the colony *)
         individual := new I.Individual;
         individual.Initialize(fixedParameters, varyParameters);
         individual.Alien(alienParameters, minParameters, maxParameters,
                          numberOfSignificantFigures, chromosomeType);
         (* create the initial population for the colony *)
         numberOfGenes := 0;
         genome := individual.Get();
         for i := 1 to genome.Strands() do
            chromosome := genome[i];
            numberOfGenes := numberOfGenes + chromosome.Length()
         end;
         genes := numberOfGenes;
         if chromosomeType = G.ChromosomeType.haploid then
            alphabet := 2  (* dominant and recessive *)
         else (* it is diploid *)
            alphabet := 3  (* dominant, dominant-recessive and recessive *)
         end;
         schemata := dimensionOfSchemata;
         popSize := Fn.Ceiling((alphabet**schemata)
                  * (schemata*Fn.Ln(alphabet) + Fn.Ln(genes)));
         populationSize := integer(popSize.Get());
         if ~odd(populationSize) then
            inc(populationSize)
         end;
         adults := new Inhabitants(populationSize);
         adults[0] := individual;
         children := new Inhabitants(populationSize);
         (* assign bounds to the phenotype *)
         varParam := new BooleanArray(len(varyParameters));
         varParam[0] := false;
         for i := 1 to len(varyParameters)-1 do
            varParam[i] := varyParameters[i]
         end;
         fixParam.Create(fixedParameters.Length());
         for i := 1 to fixedParameters.Length() do
            fixParam[i] := fixedParameters[i]
         end;
         minParam.Create(minParameters.Length());
         maxParam.Create(maxParameters.Length());
         for i := 1 to minParameters.Length() do
            minParam[i] := minParameters[i];
            maxParam[i] := maxParameters[i]
         end;
         (* create the contestants for tournament play *)
         numberOfParameters := 0;
         for i := 1 to len(varyParameters)-1 do
            if varyParameters[i] then
               inc(numberOfParameters)
            end
         end;
         players := Fn.Ceiling(1 / (1 - probabilityOfCrossover));
         numberOfContestants := integer(players.Get());
         if numberOfContestants < 2 then
            numberOfContestants := 2
         end;
         contestants := new Inhabitants(numberOfContestants);
         (* procreate the rest of the 'first' colony *)
         for i := 1 to populationSize-1 do
            individual := new I.Individual;
            individual.Initialize(fixedParameters, varyParameters);
            individual.Procreate(minParameters, maxParameters,
                                 numberOfSignificantFigures, chromosomeType);
            adults[i] := individual
         end;
         (* determine the theoretical number of iterations to convergence *)
         lifeCycles := Fn.Ceiling(Fn.Sqrt(genes)*Fn.Ln(popSize)/Fn.Ln(players));
         numberOfGenerations := integer(lifeCycles.Get());
         (* assign the remaining quantities *)
         crossoverProbability := probabilityOfCrossover/numberOfParameters;
         mutationProbability := probabilityOfMutation;
         immigrationProbability := probabilityOfImmigration;
         numberOfSigFigures := numberOfSignificantFigures;
         typeOfChromosome := chromosomeType;
         Update(converged)
      end Initialize;

      (* pair up individuals who get to mate and place them into mating pool *)
      procedure {private} Select (var fittest : I.Individual);
      var
         contestant : I.Individual;
         i, person : integer;
      begin
         if S.FlipHeads(immigrationProbability) then
            (* an immigrant migrates into the mating pool - adds diversity *)
            inc(numberOfImmigrants);
            fittest := new I.Individual;
            fittest.Initialize(fixParam, varParam);
            fittest.Procreate(minParam, maxParam, numberOfSigFigures,
                              typeOfChromosome)
         else
            (* use tournament play to select an individual for mating *)
            for i := 0 to numberOfContestants-1 do
               person := S.RandomIntegerBetween(0, populationSize-1);
               contestants[i] := adults[person]
            end;
            fittest := contestants[0];
            for i := 1 to numberOfContestants-1 do
               contestant := contestants[i];
               if contestant.lineage.fitness > fittest.lineage.fitness then
                  fittest := contestant
               end
            end
         end
      end Select;

      (* creates the next generation of inhabitants for the community *)
      procedure {private} Mate;
      var
         childA, childB, parentA, parentB : I.Individual;
         i : integer;
         genomeA, genomeB, zygoteA, zygoteB : G.Genome;
      begin
         children[0] := elite;
         for i := 1 to populationSize-1 by 2 do
            Select(parentA);
            Select(parentB);
            genomeA := parentA.Get();
            genomeB := parentB.Get();
            zygoteA := new G.Genome;
            zygoteB := new G.Genome;
            G.Crossover(crossoverProbability, genomeA, genomeB,
                        numberOfCrossovers,   zygoteA, zygoteB);
            childA := new I.Individual;
            childA.Initialize(fixParam, varParam);
            childA.Conceive(zygoteA, minParam, maxParam,
                            numberOfSigFigures, typeOfChromosome);
            childB := new I.Individual;
            childB.Initialize(fixParam, varParam);
            childB.Conceive(zygoteB, minParam, maxParam,
                            numberOfSigFigures, typeOfChromosome);
            children[i]   := childA;
            children[i+1] := childB
         end
      end Mate;

      (* subject each individual in the next generation to possible mutations *)
      procedure {private} Mutate;
      var
         i : integer;
         child : I.Individual;
      begin
         for i := 1 to populationSize-1 do
            child := children[i];
            child.Mutate(mutationProbability, numberOfMutations);
            children[i] := child
         end;
      end Mutate;

      (* ensure that all individuals in the colony are of unique fitness *)
      procedure {private} ExportClones;
      var
         i, j :integer;
         immigrant : I.Individual;
      begin
         for i := 1 to populationSize-1 do
            for j := 0 to i-1 do
               if children[i] = children[j] then
                  immigrant := new I.Individual;
                  immigrant.Initialize(fixParam, varParam);
                  immigrant.Procreate(minParam, maxParam, numberOfSigFigures,
                                      typeOfChromosome);
                  if children[i].lineage.birthID <
                     children[j].lineage.birthID then
                     children[j] := immigrant
                  else
                     children[i] := immigrant
                  end;
                  inc(numberOfImmigrants)
               end
            end
         end
      end ExportClones;

      procedure {public} Propagate (var converged : boolean);
      var
         i : integer;
      begin
         Mate;               (* create the next generation      *)
         Mutate;             (* mutate this new generation      *)
         ExportClones;       (* replace clones with immigrants  *)
         for i := 0 to populationSize-1 do
            adults[i] := children[i]
         end;
         Update(converged)   (* search for the new elite person *)
      end Propagate;

      procedure {public} Parameters () : A.Array;
      begin
         return elite.lineage.parameters
      end Parameters;

      procedure {public} ConfidentParameters (percentagePoint : D.Certainty;
                                              var bestParameters : A.Array;
                                              var goodParameters : M.Matrix);
      var
         cols, dofD, dofN, i, j, rows : integer;
         cov, inv, opt, res : M.Matrix;
         denom, numer, rhs : N.Number;
         homeKey, key, prevKey : Keys.Key;
         isViable, moved, success : boolean;
         lineage : I.Lineage;
         lu : LA.Lu;
         obj : object{Object};
      begin
         bestParameters := elite.lineage.parameters;
         rows := bestParameters.Length();
         (* inverse of the covariance matrix *)
         cov := S.Covariance(bestParameters);
         lu.Factorize(cov);
         inv := lu.Inverse();
         LA.RefineInverse(cov, inv);
         lu.Initialize;
         (* right-hand-side defining boundary of confidence region *)
         dofN := numberOfParameters;
         dofD := S.dimN - dofN;
         rhs := D.F(percentagePoint, dofN, dofD);
         rhs := dofN*rhs;
         rhs := rhs/dofD;
         (* seek out all viable sets of parameters over all generations *)
         opt := S.Residuals(bestParameters);
         denom := opt.TransposeDoubleDot(inv.Dot(opt));
         ancestory.Home;
         homeKey := ancestory.GetKey();
         moved := true;
         repeat
            key := ancestory.GetKey();
            obj := ancestory.GetData();
            lineage := I.Lineage(obj);
            res := S.Residuals(lineage.parameters);
            numer := res.TransposeDoubleDot(inv.Dot(res));
            if numer-denom <= denom*rhs then
               (* lies within the confidence region *)
               isViable := true
            else
               (* lies outside the confidence region *)
               isViable := false
            end;
            if isViable then
               prevKey := key;
               ancestory.Next(moved)
            else
               if key > homeKey then
                  ancestory.Delete(key, success);
                  ancestory.Find(prevKey, success);
                  ancestory.Next(moved)
               else
                  ancestory.Delete(homeKey, success);
                  ancestory.Home;
                  homeKey := ancestory.GetKey();
                  moved := true
               end
            end
         until ~moved;
         cols := ancestory.Length();
         goodParameters.Create(rows, cols);
         ancestory.Home;
         for j := 1 to cols do
            obj := ancestory.GetData();
            lineage := I.Lineage(obj);
            for i := 1 to rows do
               goodParameters[i, j] := lineage.parameters[i]
            end;
            ancestory.Next(moved)
         end;
         ancestory.Nullify
      end ConfidentParameters;

      procedure {public} ConfidenceIntervals (goodParameters : M.Matrix;
                                              var lowerBoundParameters,
                                              upperBoundParameters : A.Array);
      var
         cols, i, j, rows : integer;
         element, lower, upper : N.Number;
      begin
         rows := goodParameters.Rows();
         cols := goodParameters.Columns();
         lowerBoundParameters.Create(goodParameters.Rows());
         upperBoundParameters.Create(goodParameters.Rows());
         for i := 1 to rows do
            lower := goodParameters[i,1];
            upper := goodParameters[i,1];
            for j := 2 to cols do
               element := goodParameters[i,j];
               if lower > element then
                  lower := element
               end;
               if upper < element then
                  upper := element
               end
            end;
            lowerBoundParameters[i] := lower;
            upperBoundParameters[i] := upper
         end
      end ConfidenceIntervals;

      procedure {public} ReportHeader (sw : StreamWriter);
      var
         s : string;
      begin
         s := "    -------------------------------";
         s := s + "-------------------------------";
         sw.WriteLine(s);
         sw.Flush;
         s := "      R-squared statistic was based on ";
         if S.dimR = 1 then
            s := s + "linear"
         else
            case S.ls of
               S.LeastSquares.linear :
               s := s + "linear"
            |  S.LeastSquares.generalized :
               s := s + "generalized"
            else
               s := s + "non-linear"
            end
         end;
         s := s + " least squares";
         sw.WriteLine(s);
         sw.Flush;
         s :=     "    generation  :  max fitness   : ";
         s := s + "  mean fitness  :  min fitness";
         sw.WriteLine(s);
         sw.Flush;
         s := "    -------------------------------";
         s := s + "-------------------------------";
         sw.WriteLine(s);
         sw.Flush;
         (* create a stream writer for caching the gene strings *)
         writer := F.OpenWriter("temp-ga");
         lines := 0
      end ReportHeader;

      procedure {public} ReportBody (sw : StreamWriter);
      var
         chromosome : object{Chromosome};
         genome : G.Genome;
         i : integer;
         int : Int;
         par : A.Array;
         s, s0 : string;
      begin
         par := Parameters();
         IntegerToString(generation, s0);
         s := "       " + s0;
         s := s + "      " + maxFitness.ToString(5);
         s := s + "    " + meanFitness.ToString(5);
         s := s + "   " + minFitness.ToString(5);
         sw.WriteLine(s);
         sw.Flush;
         (* write the cromosome strings out to the temporary file *)
         genome := elite.Get();
         for i := 1 to genome.Strands() do
            int := i;
            if i = 1 then
               s := "    " + s0;
               s := s + " : " + int.ToString()
            elsif i < 10 then
               s := "            " + int.ToString()
            else
               s := "           " + int.ToString()
            end;
            chromosome := genome[i];
            s := s + ") " + chromosome.Typeset();
            writer.WriteLine(s);
            writer.Flush;
            inc(lines)
         end;
         s := "Generation " + s0 + " is done.";
         writeln(s)
      end ReportBody;

      procedure {public} ReportFooter (bestParameters : A.Array;
                                       goodParameters : M.Matrix;
                                       sw : StreamWriter);
      var
         i : integer;
         int : Int;
         lower, upper : A.Array;
         n : N.Number;
         reader : StreamReader;
         s : string;
      begin
         (* write out the statistical details of this run *)
         s := "    -------------------------------";
         s := s + "-------------------------------";
         sw.WriteLine(s);
         sw.Flush;
         int := numberOfGenes;
         s := "    total number of genes  = " + int.ToString();
         sw.WriteLine(s);
         sw.Flush;
         int := populationSize;
         s := "    size of the population = " + int.ToString();
         sw.WriteLine(s);
         sw.Flush;
         int := numberOfContestants;
         s := "    number of contestants  = " + int.ToString();
         sw.WriteLine(s);
         sw.Flush;
         int := numberOfGenerations;
         s := "    number of generations  = " + int.ToString();
         sw.WriteLine(s);
         sw.Flush;
         int := numberOfBorn;
         s := "    number of individuals  = " + int.ToString();
         sw.WriteLine(s);
         sw.Flush;
         int := goodParameters.Columns();
         s := "    number that are viable = " + int.ToString();
         sw.WriteLine(s);
         sw.Flush;
         int := numberOfCrossovers;
         s := "    number of crossovers : actual   = " + int.ToString();
         sw.WriteLine(s);
         sw.Flush;
         n := numberOfParameters*crossoverProbability;
         s := "        P =" + n.ToString(2);
         (* pair off couples for mating, and remove the original generation *)
         n := n*((populationSize-1) div 2)*(numberOfGenerations-1);
         int := integer(n.Get(), 32);
         s := s + "   : probable = " + int.ToString();
         sw.WriteLine(s);
         sw.Flush;
         int := numberOfMutations;
         s := "    number of mutations  : acutal   = " + int.ToString();
         sw.WriteLine(s);
         sw.Flush;
         s := "        P =" + mutationProbability.ToString(2);
         (* remove the original generation *)
         n := populationSize*(numberOfGenerations-1)*numberOfGenes
            * mutationProbability;
         if typeOfChromosome = G.ChromosomeType.diploid then
            n := 2*n   (* diploid chromosomes have two strands *)
         end;
         int := integer(n.Get(), 32);
         s := s + "   : probable = " + int.ToString();
         sw.WriteLine(s);
         sw.Flush;
         int := numberOfImmigrants;
         s := "    number of immigrants : actual   = " + int.ToString();
         sw.WriteLine(s);
         sw.Flush;
         s := "        P =" + immigrationProbability.ToString(2);
         (* remove the elite individual, and the original generation *)
         n := ((populationSize-1)*(numberOfGenerations-1))
            * immigrationProbability;
         int := integer(n.Get(), 32);
         s := s + "   : probable = " + int.ToString();
         sw.WriteLine(s);
         sw.Flush;
         s := "    -------------------------------";
         s := s + "-------------------------------";
         sw.WriteLine(s);
         sw.Flush;
         case percentagePoint of
            D.Certainty.ninety :               s := "    90%"
         |  D.Certainty.ninetyFive :           s := "    95%"
         |  D.Certainty.ninetySevenPointFive : s := "    97.5%"
         |  D.Certainty.ninetyNine :           s := "    99%"
         |  D.Certainty.ninetyNinePointFive :  s := "    99.5%"
         else
         end;
         s := s + " confidence intervals for all of the parameters are:";
         sw.WriteLine(s);
         sw.Flush;
         ConfidenceIntervals(goodParameters, lower, upper);
         for i := 1 to bestParameters.Length() do
            IntegerToString(i, s);
            s := "    " + s;
            n := lower[i];
            s := s + ")  " + n.ToString(numberOfSigFigures-1);
            n := bestParameters[i];
            s := s + " < " + n.ToString(numberOfSigFigures-1);
            n := upper[i];
            s := s + " < " + n.ToString(numberOfSigFigures-1);
            sw.WriteLine(s);
            sw.Flush
         end;
         s := "    -------------------------------";
         s := s + "-------------------------------";
         sw.WriteLine(s);
         sw.Flush;
         (* move the chromosome strings from the temporary file *)
         F.CloseWriter(writer);
         reader := F.OpenReader("temp-ga");
         s := "    gen : par)  -- genotype --";
         sw.WriteLine(s);
         sw.Flush;
         for i := 1 to lines do
            sw.WriteLine(reader.ReadLine());
            sw.Flush
         end;
         F.CloseReader(reader);
         s := "    -------------------------------";
         s := s + "-------------------------------";
         sw.WriteLine(s);
         sw.Flush;
         s := "The program has finished running.";
         writeln(s);
         writeln;
      end ReportFooter;

   begin
   end Colony;

   procedure {private} DigitToChar (x : integer; var c : char);
   begin
      if x < 5 then
         if x < 3 then
            if x = 0 then
               c := "0"
            elsif x = 1 then
               c := "1"
            else
               c := "2"
            end
         else
            if x = 3 then
               c := "3"
            else
               c := "4"
            end
         end
      else
         if x < 8 then
            if x = 5 then
               c := "5"
            elsif x = 6 then
               c := "6"
            else
               c := "7"
            end
         else
            if x = 8 then
               c := "8"
            else
               c := "9"
            end
         end
      end
   end DigitToChar;

   (* maps a positive integer 'int' into a 5 digit string *)
   procedure {private} IntegerToString (int : integer; var s : string);
   var
      a, r : array 7 of char;
      i, j, k, y, z : integer;
   begin
      y := int;
      (* convert into a reversed-order array *)
      j := 0;
      while y > 0 do
         z := y mod 10;
         DigitToChar(z, r[j]);
         y := y div 10;
         inc(j)
      end;
      i := j;
      k := 0;
      (* invert the reversed array *)
      repeat
         dec(j);
         a[k] := r[j];
         inc(k)
      until j = 0;
      copy(a, s);
      if i = 1 then
         s := "    " + s
      elsif i = 2 then
         s := "   " + s
      elsif i = 3 then
         s := "  " + s
      elsif i = 4 then
         s := " " + s
      else
      end
   end IntegerToString;

begin
end Colonies.