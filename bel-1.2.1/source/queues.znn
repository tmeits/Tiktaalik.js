(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2010, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL suite of .NET/mono libraries.                 *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Creates a persistent dynamic queue (a FIFO data buffer) for data storage   *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Object      : QueueNode   - a node for queues                              *)
(*   method    : Initialize; - called internally at object creation           *)
(*   var       : data        - a link to where the actual data are stored     *)
(*             : next        - a link to the next node in the data chain      *)
(*             : prev        - a link to the previous node in the data chain  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* object      : Queue       - a first-in-first-out (FIFO) data buffer        *)
(*   method    : Initialize; - implements Bel.Object.Initialize               *)
(*             : Nullify     - implements Bel.Object.Nullify                  *)
(*             : Clone       - implements Bel.Object.Clone                    *)
(*             : Load        - implements Bel.Object.Load                     *)
(*             : Store       - implements Bel.Object.Store                    *)
(*             : Configure   - specifies the data type for queue insertion    *)
(*             : Length      - the number of nodes being held in the queue    *)
(*             : Pop         - extract the object at the bottom of the queue  *)
(*             : Push        - place a new object onto the top of the queue   *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* The programmer needs to know a priori the data type held within a data     *)
(* structure that has been stored to file before it can be read back in.      *)
(* To read data in from a binary file, program the following steps:           *)
(*    i)   specify what type of data are to be read in from file by calling   *)
(*            <name of new data structure>.Configure(<clone of stored data>); *)
(*    ii)  read data in from the file                                         *)
(*            <name of new data structure>.Load(<reader to the binary file>); *)
(* If a data structure is to be persistent, it must only hold 1 type of data  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

object {public, ref} Bel.QueueNode;

   import
      Bel.Object      as Object,
      Bel.EmptyObject as EmptyO;

   var {public}
      next, prev : QueueNode;
      data : object{Object};

   procedure {public} Initialize;
   var
      e : EmptyO;
   begin
      data := Object(e);
      next := nil;
      prev := nil
   end Initialize;

begin
   Initialize
end QueueNode.


object {public, value} Bel.DATA.Queue implements Bel.Object;

   import
      System.Int32    as Int32,
      Bel.EmptyObject as EmptyO,
      Bel.QueueNode   as N;

   var {private}
      clone      : object{Object};
      head, tail : N;
      length     : integer;

   procedure {public} Initialize
      implements Bel.Object.Initialize;
   var
      e : EmptyO;
   begin
      clone  := Object(e);
      head   := nil;
      length := 0;
      tail   := nil
   end Initialize;

   procedure {public} Nullify
      implements Bel.Object.Nullify;
   var
      n : N;
   begin
      n := head;
      while n # nil do
         n.data.Nullify;
         n := n.next;
         if n # nil then
            n.prev.next := nil;
            n.prev := nil
         end
      end;
      Initialize
   end Nullify;

   procedure {public} Clone () : object{Object}
      implements Bel.Object.Clone;
   var
      o : object{Object};
      q : Queue;
   begin
      q.Initialize;
      o := Object(q);
      return o
   end Clone;

   (* you must Configure your queue before you can Load in data from a file *)
   procedure {public} Load (br : BinaryReader)
      implements Bel.Object.Load;
   var
      o : object{Object};
      i, j : integer;
   begin
      head := nil;
      tail := nil;
      length := 0;
      j := br.ReadInt32();
      for i := 1 to j do
         o := clone.Clone();
         o.Load(br);
         Push(o)
      end
   end Load;

   procedure {public} Store (bw : BinaryWriter)
      implements Bel.Object.Store;
   var
      i : integer;
      j : Int32;
      n : N;
   begin
      j := length;
      bw.Write(j);
      n := tail;
      for i := 1 to length do
         n.data.Store(bw);
         n := n.prev
      end;
      bw.Flush
   end Store;

   procedure {public} Configure (dataClone : object{Object});
   begin
      Initialize;
      clone := dataClone.Clone()
   end Configure;

   procedure {public} Length () : integer;
   begin
      return length
   end Length;

   procedure {public} Pop () : object{Object};
   var
      e : EmptyO;
      n : N;
      o : object{Object};
   begin
      n := tail;
      if length = 1 then
         o := Object(n.data);
         n.data := Object(e);
         Initialize
      elsif length > 1 then
         o := Object(n.data);
         n.data := Object(e);
         tail := n.prev;
         tail.next := nil;
         n.prev := nil;
         dec(length)
      else
         o := Object(e)
      end;
      return o
   end Pop;

   procedure {public} Push (datum : object{Object});
   var
      n : N;
   begin
      n := new N;
      n.data := datum;
      if length > 0 then
         head.prev := n;
         n.next := head
      else
         tail := n;
         length := 0
      end;
      head := n;
      inc(length)
   end Push;

begin
   Initialize
end Queue.